{"ast":null,"code":"\"use client\";import _objectSpread from\"C:/Users/shilo/Friedmann-initial-page/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useEffect,useState}from\"react\";const INITIAL_MESSAGE=\"Hello! I'm your financial assistant. I can help you analyze client data, review financial documents, and provide investment guidance. How can I assist you today?\";export default function useFinancialApp(){const initialAssistantMessage={role:\"assistant\",content:INITIAL_MESSAGE,citations:[]};const[messages,setMessages]=useState([initialAssistantMessage]);const[isLoading,setIsLoading]=useState(false);const[indicatorState,setIndicatorState]=useState([]);const[input,setInput]=useState(\"\");const[conversationId,setConversationId]=useState(\"\");// Generate conversation ID on mount\nuseEffect(()=>{setConversationId(crypto.randomUUID());},[]);const addUserMessage=input=>{const newUserMessage={role:\"user\",content:input,citations:[]};setMessages(prevMessages=>[...prevMessages,newUserMessage]);return newUserMessage;};const addAssistantMessage=(content,citations)=>{const newAssistantMessage={role:\"assistant\",content,citations};setMessages(prevMessages=>[...prevMessages,newAssistantMessage]);return newAssistantMessage;};const fetchAssistantResponse=async allMessages=>{const response=await fetch(\"/api/chat\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({chat:{messages:allMessages},conversation_id:conversationId})});if(!response.ok){throw new Error(\"Failed to send message\");}return response;};const handleStreamedMessage=streamedMessage=>{setIndicatorState([]);setMessages(prevMessages=>{const updatedMessages=[...prevMessages];const lastMessage=updatedMessages[updatedMessages.length-1];if(lastMessage&&lastMessage.role===\"assistant\"){updatedMessages[updatedMessages.length-1]=_objectSpread(_objectSpread({},lastMessage),{},{content:streamedMessage.message.content,citations:streamedMessage.message.citations});}else{updatedMessages.push({role:\"assistant\",content:streamedMessage.message.content,citations:streamedMessage.message.citations});}return updatedMessages;});};const handleStreamedLoading=streamedLoading=>{setIndicatorState(prevIndicatorState=>[...prevIndicatorState,streamedLoading.indicator]);};const handleStreamedError=streamedError=>{setIndicatorState(prevIndicatorState=>[...prevIndicatorState,_objectSpread(_objectSpread({},streamedError.indicator),{},{icon:\"error\"})]);};const processStreamedResponse=async response=>{var _response$body;const reader=(_response$body=response.body)===null||_response$body===void 0?void 0:_response$body.getReader();if(!reader){throw new Error(\"No reader available\");}while(true){const{done,value}=await reader.read();if(done)break;const payload=new TextDecoder().decode(value);const payloads=payload.split(\"\\n\").filter(p=>p.trim()!==\"\");for(const payloadLine of payloads){try{const parsedPayload=JSON.parse(payloadLine);if(parsedPayload.type===\"message\"){handleStreamedMessage(parsedPayload);}else if(parsedPayload.type===\"loading\"){handleStreamedLoading(parsedPayload);}else if(parsedPayload.type===\"error\"){handleStreamedError(parsedPayload);}}catch(e){console.warn(\"Failed to parse payload:\",payloadLine);}}}};const handleSubmit=async e=>{e.preventDefault();if(!input.trim())return;setIndicatorState([]);setIsLoading(true);setInput(\"\");const newUserMessage=addUserMessage(input);setTimeout(()=>{setIndicatorState([{status:\"Analyzing your request\",icon:\"understanding\"}]);},600);try{const response=await fetchAssistantResponse([...messages,newUserMessage]);await processStreamedResponse(response);}catch(error){console.error(\"Error:\",error);addAssistantMessage(\"I encountered an error processing your request. Please try again.\",[]);}finally{setIsLoading(false);}};const handleInputChange=e=>{setInput(e.target.value);};const clearMessages=()=>{setMessages([initialAssistantMessage]);setConversationId(crypto.randomUUID());};return{messages,handleInputChange,handleSubmit,indicatorState,input,isLoading,setMessages,clearMessages,conversationId};}","map":{"version":3,"names":["_objectSpread","useEffect","useState","INITIAL_MESSAGE","useFinancialApp","initialAssistantMessage","role","content","citations","messages","setMessages","isLoading","setIsLoading","indicatorState","setIndicatorState","input","setInput","conversationId","setConversationId","crypto","randomUUID","addUserMessage","newUserMessage","prevMessages","addAssistantMessage","newAssistantMessage","fetchAssistantResponse","allMessages","response","fetch","method","headers","body","JSON","stringify","chat","conversation_id","ok","Error","handleStreamedMessage","streamedMessage","updatedMessages","lastMessage","length","message","push","handleStreamedLoading","streamedLoading","prevIndicatorState","indicator","handleStreamedError","streamedError","icon","processStreamedResponse","_response$body","reader","getReader","done","value","read","payload","TextDecoder","decode","payloads","split","filter","p","trim","payloadLine","parsedPayload","parse","type","e","console","warn","handleSubmit","preventDefault","setTimeout","status","error","handleInputChange","target","clearMessages"],"sources":["C:/Users/shilo/Friedmann-initial-page/frontend/src/hooks/useFinancialApp.ts"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { DisplayMessage, LoadingIndicator, Citation } from \"../types\";\n\nconst INITIAL_MESSAGE = \"Hello! I'm your financial assistant. I can help you analyze client data, review financial documents, and provide investment guidance. How can I assist you today?\";\n\nexport default function useFinancialApp() {\n  const initialAssistantMessage: DisplayMessage = {\n    role: \"assistant\",\n    content: INITIAL_MESSAGE,\n    citations: [],\n  };\n\n  const [messages, setMessages] = useState<DisplayMessage[]>([initialAssistantMessage]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [indicatorState, setIndicatorState] = useState<LoadingIndicator[]>([]);\n  const [input, setInput] = useState(\"\");\n  const [conversationId, setConversationId] = useState<string>(\"\");\n\n  // Generate conversation ID on mount\n  useEffect(() => {\n    setConversationId(crypto.randomUUID());\n  }, []);\n\n  const addUserMessage = (input: string) => {\n    const newUserMessage: DisplayMessage = {\n      role: \"user\",\n      content: input,\n      citations: [],\n    };\n    setMessages((prevMessages) => [...prevMessages, newUserMessage]);\n    return newUserMessage;\n  };\n\n  const addAssistantMessage = (content: string, citations: Citation[]) => {\n    const newAssistantMessage: DisplayMessage = {\n      role: \"assistant\",\n      content,\n      citations,\n    };\n    setMessages((prevMessages) => [...prevMessages, newAssistantMessage]);\n    return newAssistantMessage;\n  };\n\n  const fetchAssistantResponse = async (allMessages: DisplayMessage[]) => {\n    const response = await fetch(\"/api/chat\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        chat: { messages: allMessages },\n        conversation_id: conversationId\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to send message\");\n    }\n\n    return response;\n  };\n\n  const handleStreamedMessage = (streamedMessage: any) => {\n    setIndicatorState([]);\n    setMessages((prevMessages) => {\n      const updatedMessages = [...prevMessages];\n      const lastMessage = updatedMessages[updatedMessages.length - 1];\n\n      if (lastMessage && lastMessage.role === \"assistant\") {\n        updatedMessages[updatedMessages.length - 1] = {\n          ...lastMessage,\n          content: streamedMessage.message.content,\n          citations: streamedMessage.message.citations,\n        };\n      } else {\n        updatedMessages.push({\n          role: \"assistant\",\n          content: streamedMessage.message.content,\n          citations: streamedMessage.message.citations,\n        });\n      }\n\n      return updatedMessages;\n    });\n  };\n\n  const handleStreamedLoading = (streamedLoading: any) => {\n    setIndicatorState((prevIndicatorState) => [\n      ...prevIndicatorState,\n      streamedLoading.indicator,\n    ]);\n  };\n\n  const handleStreamedError = (streamedError: any) => {\n    setIndicatorState((prevIndicatorState) => [\n      ...prevIndicatorState,\n      { ...streamedError.indicator, icon: \"error\" },\n    ]);\n  };\n\n  const processStreamedResponse = async (response: Response) => {\n    const reader = response.body?.getReader();\n    if (!reader) {\n      throw new Error(\"No reader available\");\n    }\n\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) break;\n\n      const payload = new TextDecoder().decode(value);\n      const payloads = payload.split(\"\\n\").filter((p) => p.trim() !== \"\");\n\n      for (const payloadLine of payloads) {\n        try {\n          const parsedPayload = JSON.parse(payloadLine);\n\n          if (parsedPayload.type === \"message\") {\n            handleStreamedMessage(parsedPayload);\n          } else if (parsedPayload.type === \"loading\") {\n            handleStreamedLoading(parsedPayload);\n          } else if (parsedPayload.type === \"error\") {\n            handleStreamedError(parsedPayload);\n          }\n        } catch (e) {\n          console.warn(\"Failed to parse payload:\", payloadLine);\n        }\n      }\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!input.trim()) return;\n    \n    setIndicatorState([]);\n    setIsLoading(true);\n    setInput(\"\");\n    const newUserMessage = addUserMessage(input);\n\n    setTimeout(() => {\n      setIndicatorState([\n        {\n          status: \"Analyzing your request\",\n          icon: \"understanding\",\n        },\n      ]);\n    }, 600);\n\n    try {\n      const response = await fetchAssistantResponse([\n        ...messages,\n        newUserMessage,\n      ]);\n      await processStreamedResponse(response);\n    } catch (error) {\n      console.error(\"Error:\", error);\n      addAssistantMessage(\"I encountered an error processing your request. Please try again.\", []);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInput(e.target.value);\n  };\n\n  const clearMessages = () => {\n    setMessages([initialAssistantMessage]);\n    setConversationId(crypto.randomUUID());\n  };\n\n  return {\n    messages,\n    handleInputChange,\n    handleSubmit,\n    indicatorState,\n    input,\n    isLoading,\n    setMessages,\n    clearMessages,\n    conversationId,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}