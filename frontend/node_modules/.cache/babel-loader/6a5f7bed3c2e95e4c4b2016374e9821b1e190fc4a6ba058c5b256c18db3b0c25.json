{"ast":null,"code":"'use client';\n\nvar _jsxFileName = \"C:\\\\Users\\\\shilo\\\\Friedmann-initial-page\\\\frontend\\\\src\\\\components\\\\financial\\\\FinancialApp.tsx\",\n  _s = $RefreshSig$();\nimport { TooltipProvider } from '@radix-ui/react-tooltip';\nimport ChatMessages from '../chat/messages';\nimport ChatInput from '../chat/input';\nimport FinancialHeader from './FinancialHeader';\nimport useFinancialApp from '../../hooks/useFinancialApp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FinancialApp() {\n  _s();\n  const {\n    messages,\n    handleInputChange,\n    handleSubmit,\n    indicatorState,\n    input,\n    isLoading,\n    clearMessages,\n    conversationId\n  } = useFinancialApp();\n  const handleGenerateReport = async () => {\n    try {\n      // For now, we'll use a default client name. In a real app, you'd get this from user input or context\n      const clientName = prompt(\"Enter client name for the financial report:\");\n      if (!clientName) return;\n      const response = await fetch('http://localhost:8000/api/generate-report', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          client_name: clientName,\n          conversation_id: conversationId,\n          report_type: 'comprehensive'\n        })\n      });\n      if (response.ok) {\n        const result = await response.json();\n\n        // Add the report URL as a message in the chat\n        const reportMessage = `📊 **Financial Report Generated Successfully!**\n\n**Client:** ${clientName}\n**Report ID:** ${result.report_id}\n\n**Report URL:** ${result.report_url}\n\n*Copy the URL above and paste it in a new tab to view your professional financial report.*`;\n\n        // Add the report message to the chat\n        const reportChatMessage = {\n          role: \"assistant\",\n          content: reportMessage,\n          citations: []\n        };\n\n        // Update messages state\n        setMessages(prevMessages => [...prevMessages, reportChatMessage]);\n\n        // Also try to copy to clipboard\n        try {\n          await navigator.clipboard.writeText(result.report_url);\n        } catch (clipboardError) {\n          // Clipboard copy failed, but that's okay since the URL is in the chat\n          console.log('Clipboard copy failed, but URL is displayed in chat');\n        }\n      } else {\n        const errorMessage = {\n          role: \"assistant\",\n          content: \"❌ Failed to generate financial report. Please try again.\",\n          citations: []\n        };\n        setMessages(prevMessages => [...prevMessages, errorMessage]);\n      }\n    } catch (error) {\n      console.error('Error generating report:', error);\n      alert('Error generating financial report');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(TooltipProvider, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col h-screen bg-background\",\n      children: [/*#__PURE__*/_jsxDEV(FinancialHeader, {\n        clearMessages: clearMessages,\n        onGenerateReport: handleGenerateReport\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-1 overflow-y-auto pt-16\",\n        children: /*#__PURE__*/_jsxDEV(ChatMessages, {\n          messages: messages,\n          indicatorState: indicatorState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n        handleInputChange: handleInputChange,\n        handleSubmit: handleSubmit,\n        input: input,\n        isLoading: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(FinancialApp, \"Vq+mdSHrdzK2f5bfbnby8G4Y+6I=\", false, function () {\n  return [useFinancialApp];\n});\n_c = FinancialApp;\nvar _c;\n$RefreshReg$(_c, \"FinancialApp\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","TooltipProvider","ChatMessages","ChatInput","FinancialHeader","useFinancialApp","jsxDEV","_jsxDEV","FinancialApp","messages","handleInputChange","handleSubmit","indicatorState","input","isLoading","clearMessages","conversationId","handleGenerateReport","clientName","prompt","response","fetch","method","headers","body","JSON","stringify","client_name","conversation_id","report_type","ok","result","json","reportMessage","report_id","report_url","reportChatMessage","role","content","citations","setMessages","prevMessages","navigator","clipboard","writeText","clipboardError","console","log","errorMessage","error","alert","children","className","onGenerateReport","fileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/shilo/Friedmann-initial-page/frontend/src/components/financial/FinancialApp.tsx"],"sourcesContent":["'use client';\n\nimport { TooltipProvider } from '@radix-ui/react-tooltip';\nimport ChatMessages from '../chat/messages';\nimport ChatInput from '../chat/input';\nimport FinancialHeader from './FinancialHeader';\nimport useFinancialApp from '../../hooks/useFinancialApp';\n\nexport default function FinancialApp() {\n  const {\n    messages,\n    handleInputChange,\n    handleSubmit,\n    indicatorState,\n    input,\n    isLoading,\n    clearMessages,\n    conversationId,\n  } = useFinancialApp();\n\n  const handleGenerateReport = async () => {\n    try {\n      // For now, we'll use a default client name. In a real app, you'd get this from user input or context\n      const clientName = prompt(\"Enter client name for the financial report:\");\n      if (!clientName) return;\n\n      const response = await fetch('http://localhost:8000/api/generate-report', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          client_name: clientName,\n          conversation_id: conversationId,\n          report_type: 'comprehensive'\n        }),\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        \n        // Add the report URL as a message in the chat\n        const reportMessage = `📊 **Financial Report Generated Successfully!**\n\n**Client:** ${clientName}\n**Report ID:** ${result.report_id}\n\n**Report URL:** ${result.report_url}\n\n*Copy the URL above and paste it in a new tab to view your professional financial report.*`;\n\n        // Add the report message to the chat\n        const reportChatMessage = {\n          role: \"assistant\",\n          content: reportMessage,\n          citations: []\n        };\n        \n        // Update messages state\n        setMessages(prevMessages => [...prevMessages, reportChatMessage]);\n        \n        // Also try to copy to clipboard\n        try {\n          await navigator.clipboard.writeText(result.report_url);\n        } catch (clipboardError) {\n          // Clipboard copy failed, but that's okay since the URL is in the chat\n          console.log('Clipboard copy failed, but URL is displayed in chat');\n        }\n      } else {\n        const errorMessage = {\n          role: \"assistant\",\n          content: \"❌ Failed to generate financial report. Please try again.\",\n          citations: []\n        };\n        setMessages(prevMessages => [...prevMessages, errorMessage]);\n      }\n    } catch (error) {\n      console.error('Error generating report:', error);\n      alert('Error generating financial report');\n    }\n  };\n\n  return (\n    <TooltipProvider>\n      <div className='flex flex-col h-screen bg-background'>\n        <FinancialHeader clearMessages={clearMessages} onGenerateReport={handleGenerateReport} />\n        \n        <div className='flex-1 overflow-y-auto pt-16'>\n          <ChatMessages\n            messages={messages}\n            indicatorState={indicatorState}\n          />\n        </div>\n\n        <ChatInput\n          handleInputChange={handleInputChange}\n          handleSubmit={handleSubmit}\n          input={input}\n          isLoading={isLoading}\n        />\n      </div>\n    </TooltipProvider>\n  );\n}"],"mappings":"AAAA,YAAY;;AAAC,IAAAA,YAAA;EAAAC,EAAA,GAAAC,YAAA;AAEb,SAASC,eAAe,QAAQ,yBAAyB;AACzD,OAAOC,YAAY,MAAM,kBAAkB;AAC3C,OAAOC,SAAS,MAAM,eAAe;AACrC,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,eAAe,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,eAAe,SAASC,YAAYA,CAAA,EAAG;EAAAT,EAAA;EACrC,MAAM;IACJU,QAAQ;IACRC,iBAAiB;IACjBC,YAAY;IACZC,cAAc;IACdC,KAAK;IACLC,SAAS;IACTC,aAAa;IACbC;EACF,CAAC,GAAGX,eAAe,CAAC,CAAC;EAErB,MAAMY,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACvC,IAAI;MACF;MACA,MAAMC,UAAU,GAAGC,MAAM,CAAC,6CAA6C,CAAC;MACxE,IAAI,CAACD,UAAU,EAAE;MAEjB,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,2CAA2C,EAAE;QACxEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,WAAW,EAAET,UAAU;UACvBU,eAAe,EAAEZ,cAAc;UAC/Ba,WAAW,EAAE;QACf,CAAC;MACH,CAAC,CAAC;MAEF,IAAIT,QAAQ,CAACU,EAAE,EAAE;QACf,MAAMC,MAAM,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;;QAEpC;QACA,MAAMC,aAAa,GAAG;AAC9B;AACA,cAAcf,UAAU;AACxB,iBAAiBa,MAAM,CAACG,SAAS;AACjC;AACA,kBAAkBH,MAAM,CAACI,UAAU;AACnC;AACA,2FAA2F;;QAEnF;QACA,MAAMC,iBAAiB,GAAG;UACxBC,IAAI,EAAE,WAAW;UACjBC,OAAO,EAAEL,aAAa;UACtBM,SAAS,EAAE;QACb,CAAC;;QAED;QACAC,WAAW,CAACC,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAEL,iBAAiB,CAAC,CAAC;;QAEjE;QACA,IAAI;UACF,MAAMM,SAAS,CAACC,SAAS,CAACC,SAAS,CAACb,MAAM,CAACI,UAAU,CAAC;QACxD,CAAC,CAAC,OAAOU,cAAc,EAAE;UACvB;UACAC,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAC;QACpE;MACF,CAAC,MAAM;QACL,MAAMC,YAAY,GAAG;UACnBX,IAAI,EAAE,WAAW;UACjBC,OAAO,EAAE,0DAA0D;UACnEC,SAAS,EAAE;QACb,CAAC;QACDC,WAAW,CAACC,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAEO,YAAY,CAAC,CAAC;MAC9D;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChDC,KAAK,CAAC,mCAAmC,CAAC;IAC5C;EACF,CAAC;EAED,oBACE3C,OAAA,CAACN,eAAe;IAAAkD,QAAA,eACd5C,OAAA;MAAK6C,SAAS,EAAC,sCAAsC;MAAAD,QAAA,gBACnD5C,OAAA,CAACH,eAAe;QAACW,aAAa,EAAEA,aAAc;QAACsC,gBAAgB,EAAEpC;MAAqB;QAAAqC,QAAA,EAAAxD,YAAA;QAAAyD,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAEzFjD,OAAA;QAAK6C,SAAS,EAAC,8BAA8B;QAAAD,QAAA,eAC3C5C,OAAA,CAACL,YAAY;UACXO,QAAQ,EAAEA,QAAS;UACnBG,cAAc,EAAEA;QAAe;UAAA0C,QAAA,EAAAxD,YAAA;UAAAyD,UAAA;UAAAC,YAAA;QAAA,OAChC;MAAC;QAAAF,QAAA,EAAAxD,YAAA;QAAAyD,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAENjD,OAAA,CAACJ,SAAS;QACRO,iBAAiB,EAAEA,iBAAkB;QACrCC,YAAY,EAAEA,YAAa;QAC3BE,KAAK,EAAEA,KAAM;QACbC,SAAS,EAAEA;MAAU;QAAAwC,QAAA,EAAAxD,YAAA;QAAAyD,UAAA;QAAAC,YAAA;MAAA,OACtB,CAAC;IAAA;MAAAF,QAAA,EAAAxD,YAAA;MAAAyD,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAF,QAAA,EAAAxD,YAAA;IAAAyD,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAEtB;AAACzD,EAAA,CA/FuBS,YAAY;EAAA,QAU9BH,eAAe;AAAA;AAAAoD,EAAA,GAVGjD,YAAY;AAAA,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}