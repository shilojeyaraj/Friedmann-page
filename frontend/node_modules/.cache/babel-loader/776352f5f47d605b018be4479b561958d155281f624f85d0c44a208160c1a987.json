{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shilo\\\\Friedmann-initial-page\\\\frontend\\\\src\\\\contexts\\\\ClientContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ClientContext = /*#__PURE__*/createContext(undefined);\nexport const useClient = () => {\n  _s();\n  const context = useContext(ClientContext);\n  if (context === undefined) {\n    throw new Error('useClient must be used within a ClientProvider');\n  }\n  return context;\n};\n_s(useClient, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ClientProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentClient, setCurrentClient] = useState(null);\n  const [clients, setClients] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const loadClients = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch('http://localhost:8000/api/clients');\n      const data = await response.json();\n      if (data.success) {\n        setClients(data.clients);\n        // If no current client is selected and we have clients, select the first one\n        if (!currentClient && data.clients.length > 0) {\n          setCurrentClient(data.clients[0]);\n        }\n      } else {\n        console.error('Failed to load clients:', data.error);\n      }\n    } catch (error) {\n      console.error('Error loading clients:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const createClient = async clientData => {\n    setIsLoading(true);\n    try {\n      const response = await fetch('http://localhost:8000/api/clients', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(clientData)\n      });\n      const data = await response.json();\n      if (data.success) {\n        const newClient = data.client;\n        setClients(prev => [...prev, newClient]);\n        setCurrentClient(newClient);\n        return newClient;\n      } else {\n        console.error('Failed to create client:', data.error);\n        return null;\n      }\n    } catch (error) {\n      console.error('Error creating client:', error);\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  useEffect(() => {\n    loadClients();\n  }, []);\n  const value = {\n    currentClient,\n    clients,\n    setCurrentClient,\n    loadClients,\n    createClient,\n    isLoading\n  };\n  return /*#__PURE__*/_jsxDEV(ClientContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s2(ClientProvider, \"rKMkUbhMf3PZk25ShkaM+c+aRSc=\");\n_c = ClientProvider;\nvar _c;\n$RefreshReg$(_c, \"ClientProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","ClientContext","undefined","useClient","_s","context","Error","ClientProvider","children","_s2","currentClient","setCurrentClient","clients","setClients","isLoading","setIsLoading","loadClients","response","fetch","data","json","success","length","console","error","createClient","clientData","method","headers","body","JSON","stringify","newClient","client","prev","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/shilo/Friedmann-initial-page/frontend/src/contexts/ClientContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\n\r\ninterface Client {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  phone?: string;\r\n  age?: number;\r\n  income?: number;\r\n  occupation?: string;\r\n  goals?: string;\r\n  notes?: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\ninterface ClientContextType {\r\n  currentClient: Client | null;\r\n  clients: Client[];\r\n  setCurrentClient: (client: Client | null) => void;\r\n  loadClients: () => Promise<void>;\r\n  createClient: (clientData: Partial<Client>) => Promise<Client | null>;\r\n  isLoading: boolean;\r\n}\r\n\r\nconst ClientContext = createContext<ClientContextType | undefined>(undefined);\r\n\r\nexport const useClient = () => {\r\n  const context = useContext(ClientContext);\r\n  if (context === undefined) {\r\n    throw new Error('useClient must be used within a ClientProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface ClientProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const ClientProvider: React.FC<ClientProviderProps> = ({ children }) => {\r\n  const [currentClient, setCurrentClient] = useState<Client | null>(null);\r\n  const [clients, setClients] = useState<Client[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const loadClients = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const response = await fetch('http://localhost:8000/api/clients');\r\n      const data = await response.json();\r\n      \r\n      if (data.success) {\r\n        setClients(data.clients);\r\n        // If no current client is selected and we have clients, select the first one\r\n        if (!currentClient && data.clients.length > 0) {\r\n          setCurrentClient(data.clients[0]);\r\n        }\r\n      } else {\r\n        console.error('Failed to load clients:', data.error);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading clients:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const createClient = async (clientData: Partial<Client>): Promise<Client | null> => {\r\n    setIsLoading(true);\r\n    try {\r\n      const response = await fetch('http://localhost:8000/api/clients', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(clientData),\r\n      });\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (data.success) {\r\n        const newClient = data.client;\r\n        setClients(prev => [...prev, newClient]);\r\n        setCurrentClient(newClient);\r\n        return newClient;\r\n      } else {\r\n        console.error('Failed to create client:', data.error);\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating client:', error);\r\n      return null;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadClients();\r\n  }, []);\r\n\r\n  const value: ClientContextType = {\r\n    currentClient,\r\n    clients,\r\n    setCurrentClient,\r\n    loadClients,\r\n    createClient,\r\n    isLoading,\r\n  };\r\n\r\n  return (\r\n    <ClientContext.Provider value={value}>\r\n      {children}\r\n    </ClientContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}